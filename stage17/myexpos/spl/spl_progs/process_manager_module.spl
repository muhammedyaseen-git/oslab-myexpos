alias funcNum R1;               // Function Number for process manager
if(funcNum == 2) then           // Free user area page function call

    alias PID R2;               // PID for free
    alias userPage R3;  	//user area page
    userPage = [PROCESS_TABLE + PID * 16 + 11];

    multipush(R1, R2, R3);
    R1 = 2;                     // Release Page function number for mem manager
    R2 = userPage;              // Page to be deallocated
    call MEMORY_MANAGER;        // Call memory manager module
    multipop(R1, R2, R3);

    return;

endif;

if(funcNum == 3) then           // Exit Process function call for proc manager

    alias PID R2;               // PID for exit

    multipush(R1, R2);          
    R1 = 4;			//recursive call to process manager for freeing page table
    R2 = [SYSTEM_STATUS_TABLE+1];	//current PID
    call PROCESS_MANAGER;
    multipop(R1, R2);

    multipush(R1, R2);          //recursive call to process manager for freeing User Page area
    R1 = 2;
    call PROCESS_MANAGER;
    multipop(R1, R2);

    [PROCESS_TABLE + PID * 16 + 4] = TERMINATED;    // Set state to TERMINATED
    
    return;

endif;

if(funcNum == 4) then           // Free Page Table func call in proc manager

    alias PID R2;               // PID

    alias page_table R3;
    page_table = PAGE_TABLE_BASE + PID * 20;

    [page_table + 0] = -1;      // unlinking Library pages
    [page_table + 1] = "0000";
    [page_table + 2] = -1;
    [page_table + 3] = "0000";
    
    alias i R4;
    i = 4;

    alias pageDel R5;           // page num to be deleted

    while(i < 20) do

        if([page_table + i] != -1) then             // deallocate only valid pages
            
            pageDel = [page_table + i];
            multipush(R1, R2, R3, R4);
            R1 = 2;
            R2 = pageDel;
            call MEMORY_MANAGER;
            multipop(R1, R2, R3, R4);

            [page_table + i] = -1;
            [page_table + i + 1] = "0000";

        endif;

        i = i + 2;

    endwhile;

    return;

endif;
